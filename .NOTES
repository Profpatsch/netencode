# Development Notes

This file tracks observations, potential issues, and areas for improvement discovered during development.

## Pretty Printer Issues

### Leading Empty Line in Multi-field Records  
**Date**: 2025-01-04  
**Issue**: `netencode-pretty` outputs a leading empty line when formatting multi-field records  
**Status**: ✅ **FIXED** - 2025-01-07  
**Fix**: Modified `lib-rust/pretty.rs` line 265 to remove leading newline in multi-line formatting  
**Impact**: Pretty printer now correctly formats multi-field records, nested records, and lists without unwanted leading empty lines  

## Field Ordering

### Python vs JSON-to-netencode Field Order
**Date**: 2025-01-04  
**Observation**: Python `netencode.record()` orders fields alphabetically, while `json-to-netencode` preserves JSON key order  
**Example**: 
- Python: `{49:<4:name|t5:Alice,<3:age|i:30,<6:active|<4:true|u,}`
- JSON: `{49:<6:active|<4:true|u,<3:age|i:30,<4:name|t5:Alice,}`
**Status**: Expected behavior (different ordering strategies)  
**Impact**: Documentation must show correct expected outputs for each method

## Testing Infrastructure

### Test Data Generation
**Date**: 2025-01-04  
**Best Practice**: Always use `json-to-netencode` for generating test data rather than hand-crafting netencode format  
**Reason**: Ensures correct length prefixes and format compliance  
**Reference**: Fixed netencode-filter tests by using proper generation

## Areas for Future Investigation

- [x] ~~Pretty printer leading empty line behavior~~ (Fixed 2025-01-07)
- [ ] Standardize field ordering across implementations
- [ ] Performance benchmarks vs other formats
- [ ] Error message clarity improvements

## Rust Implementation TODOs

### Type System Improvements
**Date**: 2025-01-04  
**Files**: `lib-rust/src/netencode.rs`  
**TODOs Found**: 12 total

**API Design Issues**:
- Lines 19, 24, 27, 167: Convert `String` fields to `&str` for zero-copy parsing
- Lines 21, 25, 850: Rename `Binary` → `Bytes`, `Sum` → `Tag` for clarity  
- Line 894: Rename `Record` type description from "map of Ts" to "map"
- Line 131: Rename type parameter in Tag struct

**Performance Issues**:
- Line 112: `T::from_u()` conversion inefficient, avoid U→T roundtrip
- Line 128: U-recursion prevents breadth-lazy evaluation

**Code Organization**:
- Line 319: Move decoder code to separate module

### Execution Helpers Performance
**Date**: 2025-01-04  
**File**: `lib-rust/exec-helpers/exec_helpers.rs`  
**Lines**: 68, 75

**Issue**: Unnecessary Vec collection for iterator processing  
**Impact**: Memory overhead when processing command arguments and environment  
**Complexity**: Medium - requires careful lifetime management

### Pretty Printer Issues  
**Date**: 2025-01-04  
**File**: `lib-rust/pretty.rs`  
**Lines**: 161, 171

**Issue**: Length information lost during U→Pretty conversion  
**Impact**: Pretty printer can't show original encoded lengths  
**Decision Needed**: Whether to recompute or preserve original lengths

## Development Experience Improvements


